##################Arbitarage formulation#######################################

->Inequality constraints: 

1) Spend by each currency >= 0 
2) After conversion cycle the final purchased currency >= 0 


->Equality contraints
3) Spend by each currency - after conversion cycle the final purchased currency = 0 except the currency which you want to get arbitarage

bounds
4) If we can't control the amounts traded the solution will go to infinity to control this we put arbitaty bound so x = (0,arbitary_bound)

Maximized function

5) After conversion cycle the final purchased currency - Spend by each currency  >= 0 



######################Mathematical formulation####################################
 
-> Inequality constraints:
1. (sum over i)r_ij*x_ij >= 0 -> for each j = 1,2,3......n
2. (sum over j)x_ij >= 0 -> for each i = 1,2,3......n

-> Equality contraints
3. (sum over i)r_ij*x_ij - (sum over j)x_ij = 0 -> for each currrency except k

-> bound
4. 0<=X_ij<=arbitary_bound

-> Function 
5. (sum over i)r_ik*x_ik - (sum over j)x_kj >= 0 -> for k currrency maximize to get arbitarage

#######################Python solution#################################################

The solution of above equation is done in python using the "get_arbitarage" function which is provided in currency_2023f.py file

In which the inputs are conversion matrix, size, currency index to arbitarage, arbitary bound

Note : In python scipy function uses the minimization equatility and minimize function so to convert our maximization I sometimes multipy the equation with -1 to convert it into
Minimization

The ans to the function is saved in ans_arbitarage.csv

############################Validation###################################################

Validation csv is stored in ans_arbitarage_constraint_validation.xlsx. To check the constraints are satified


##############################Ans##########################################################
For the given currency dollar and arbitary bound 1 I got the arbitarage of 0.0171.









